Dictionary [deprecated]
Class Dictionary<K,V>
=======================
Ref : http://docs.oracle.com/javase/7/docs/api/java/util/Dictionary.html

A Dictionary is an abstract class that maps keys to values. 
Every key is associated with a unique value and key are unique. 
Any non-null object can be used for either a key or a value. 
An attempt to insert either a null key or a null value to a dictionary will result to a NullPointerException.

Class Hashtable<K,V> [ use HashMap instead] 
====================
Reference : http://docs.oracle.com/javase/7/docs/api/java/util/Hashtable.html
This class implements a hash table, which maps keys to values. Any non-null object can be used as a key or as a value.

As of the Java 2 platform v1.2, this class was retrofitted to implement 
the Map interface, making it a member of the Java Collections Framework.
 Unlike the new collection implementations, Hashtable is synchronized. 
 If a thread-safe implementation is not needed, it is recommended to use HashMap in place of Hashtable. 
 If a thread-safe highly-concurrent implementation is desired, then it is recommended to use 
 ConcurrentHashMap in place of Hashtable.

Class HashMap<K,V>
==================

Hash table based implementation of the Map interface. This implementation provides all of the optional 
map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, 
except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; 
in particular, it does not guarantee that the order will remain constant over time.


HashSet vs HashMap
==================
Reference : http://beginnersbook.com/2014/08/hashset-vs-hashmap-java/
Differences:
============

    HashSet class implements the Set interface
 	HashMap class implements the Map interface

	In HashSet we store objects(elements or values) e.g. If we have a HashSet of string elements 
	then it could depict a set of HashSet elements: {“Hello”, “Hi”, “Bye”, “Run”}	
	
	HashMap is used for storing key & value pairs. 
	In short it maintains the mapping of key & value (The HashMap class is roughly equivalent to Hashtable,
	except that it is unsynchronized and permits nulls.) 
	This is how you could represent HashMap elements if it has integer key and 
	value of String type: e.g. {1->”Hello”, 2->”Hi”, 3->”Bye”, 4->”Run”}

	HashSet does not allow duplicate elements that means you can not store duplicate values in HashSet.
	HashMap does not allow duplicate keys however it allows to have duplicate values.
	
	HashSet permits to have a single null value.	
	HashMap permits single null key and any number of null values.

Similarities:
=============
1) Both HashMap and HashSet are not synchronized which means they are not suitable for thread-safe operations unitl unless synchronized explicitly. This is how you can synchronize them explicitly:
HashSet:

Set s = Collections.synchronizedSet(new HashSet(...));
HashMap:

 Map m = Collections.synchronizedMap(new HashMap(...));
2) Both of these classes do not guarantee that the order of their elements will remain constant over time.

3) If you look at the source code of HashSet then you may find that it is backed up by a HashMap. So basically it internally uses a HashMap for all of its operations.

4) They both provide constant time performance for basic operations such as adding, removing element etc.

HashSet example
===============
import java.util.HashSet;
class HashSetDemo{ 
  public static void main(String[] args) {
     // Create a HashSet
     HashSet<String> hset = new HashSet<String>();
 
     //add elements to HashSet
     hset.add("AA");
     hset.add("BB");
     hset.add("CC");
     hset.add("DD");
 
     // Displaying HashSet elements
     System.out.println("HashSet contains: ");
     for(String temp : hset){
        System.out.println(temp);
     }
  }
}
Output:
======
HashSet contains: 
AA
BB
CC
DD

HashMap example
====================
import java.util.HashMap;
class HashMapDemo{ 
  public static void main(String[] args) {
     // Create a HashMap
     HashMap<Integer, String> hmap = new HashMap<Integer, String>();
 
     //add elements to HashMap
     hmap.put(1, "AA");
     hmap.put(2, "BB");
     hmap.put(3, "CC");
     hmap.put(4, "DD");
 
     // Displaying HashMap elements
     System.out.println("HashMap contains: "+hmap);
  }
}
Output:

HashMap contains: {1=AA, 2=BB, 3=CC, 4=DD}

Difference between ArrayList and HashSet in Java
================================================
Implementation:
Implementation : ArrayList implements List interface while HashSet implements Set interface in Java.
Internal implementation:
ArrayList is backed by an Array while HashSet is backed by an HashMap.
Duplicates :
ArrayList allows duplicate values while HashSet doesn’t allow duplicates values.
Constructor :
ArrayList have three constructor which are ArrayList(), ArrayList(int capacity) ArrayList(int Collection c) while HashSet have four constructor which are HashSet(), HashSet(int capacity), HashSet(Collection c) and HashSet(int capacity, float loadFactor)
Ordering :
ArrayList maintains the order of the object in which they are inserted while HashSet is an unordered collection and doesn’t maintain any order.
Indexing :
ArrayList is index based we can retrieve object by calling get(index) method or remove objects by calling remove(index) method while HashSet is completely object based. HashSet also does not provide get() method.
Null Object:
ArrayList not apply any restriction, we can add any number of null value while HashSet allow one null value.
Syntax:
ArrayList:-
ArrayList list=new ArrayList();
HashSet:-

HashSet set=new HashSet();
